//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeamsAuthorizationService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://authorization.bds", ConfigurationName="BeamsAuthorizationService.AuthorizationServicePortType")]
    public interface AuthorizationServicePortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:getAuthSlip", ReplyAction="urn:getAuthSlipResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<BeamsAuthorizationService.getAuthSlipResponse> getAuthSlipAsync(BeamsAuthorizationService.getAuthSlipRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://authorization.bds/xsd")]
    public partial class AuthorizationSlip
    {
        
        private string[] additionalFieldsField;
        
        private string authNOField;
        
        private byte[] authPdfField;
        
        private string budgetYear1Field;
        
        private string budgetYear2Field;
        
        private string ddoCodeField;
        
        private string expTotalField;
        
        private string statusCodeField;
        
        private string totalBudgetField;
        
        private string transNoField;
        
        private string validToField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("additionalFields", IsNullable=true, Order=0)]
        public string[] additionalFields
        {
            get
            {
                return this.additionalFieldsField;
            }
            set
            {
                this.additionalFieldsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string authNO
        {
            get
            {
                return this.authNOField;
            }
            set
            {
                this.authNOField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true, Order=2)]
        public byte[] authPdf
        {
            get
            {
                return this.authPdfField;
            }
            set
            {
                this.authPdfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public string budgetYear1
        {
            get
            {
                return this.budgetYear1Field;
            }
            set
            {
                this.budgetYear1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string budgetYear2
        {
            get
            {
                return this.budgetYear2Field;
            }
            set
            {
                this.budgetYear2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public string ddoCode
        {
            get
            {
                return this.ddoCodeField;
            }
            set
            {
                this.ddoCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=6)]
        public string expTotal
        {
            get
            {
                return this.expTotalField;
            }
            set
            {
                this.expTotalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=7)]
        public string statusCode
        {
            get
            {
                return this.statusCodeField;
            }
            set
            {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=8)]
        public string totalBudget
        {
            get
            {
                return this.totalBudgetField;
            }
            set
            {
                this.totalBudgetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=9)]
        public string transNo
        {
            get
            {
                return this.transNoField;
            }
            set
            {
                this.transNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=10)]
        public string validTo
        {
            get
            {
                return this.validToField;
            }
            set
            {
                this.validToField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAuthSlip", WrapperNamespace="http://authorization.bds", IsWrapped=true)]
    public partial class getAuthSlipRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://authorization.bds", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string xml;
        
        public getAuthSlipRequest()
        {
        }
        
        public getAuthSlipRequest(string xml)
        {
            this.xml = xml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAuthSlipResponse", WrapperNamespace="http://authorization.bds", IsWrapped=true)]
    public partial class getAuthSlipResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://authorization.bds", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public BeamsAuthorizationService.AuthorizationSlip[] @return;
        
        public getAuthSlipResponse()
        {
        }
        
        public getAuthSlipResponse(BeamsAuthorizationService.AuthorizationSlip[] @return)
        {
            this.@return = @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface AuthorizationServicePortTypeChannel : BeamsAuthorizationService.AuthorizationServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AuthorizationServicePortTypeClient : System.ServiceModel.ClientBase<BeamsAuthorizationService.AuthorizationServicePortType>, BeamsAuthorizationService.AuthorizationServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthorizationServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthorizationServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), AuthorizationServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizationServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthorizationServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizationServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthorizationServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorizationServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BeamsAuthorizationService.getAuthSlipResponse> BeamsAuthorizationService.AuthorizationServicePortType.getAuthSlipAsync(BeamsAuthorizationService.getAuthSlipRequest request)
        {
            return base.Channel.getAuthSlipAsync(request);
        }
        
        public System.Threading.Tasks.Task<BeamsAuthorizationService.getAuthSlipResponse> getAuthSlipAsync(string xml)
        {
            BeamsAuthorizationService.getAuthSlipRequest inValue = new BeamsAuthorizationService.getAuthSlipRequest();
            inValue.xml = xml;
            return ((BeamsAuthorizationService.AuthorizationServicePortType)(this)).getAuthSlipAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpSoap11Endpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpsSoap11Endpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpsSoap12Endpoint))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpSoap12Endpoint))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpSoap11Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://testbeams.mahaitgov.in:8080/BeamsWS1/services/AuthorizationService.Authori" +
                        "zationServiceHttpSoap11Endpoint/");
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpsSoap11Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://testbeams.mahaitgov.in:8443/BeamsWS1/services/AuthorizationService.Authori" +
                        "zationServiceHttpsSoap11Endpoint/");
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpsSoap12Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://testbeams.mahaitgov.in:8443/BeamsWS1/services/AuthorizationService.Authori" +
                        "zationServiceHttpsSoap12Endpoint/");
            }
            if ((endpointConfiguration == EndpointConfiguration.AuthorizationServiceHttpSoap12Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://testbeams.mahaitgov.in:8080/BeamsWS1/services/AuthorizationService.Authori" +
                        "zationServiceHttpSoap12Endpoint/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            AuthorizationServiceHttpSoap11Endpoint,
            
            AuthorizationServiceHttpsSoap11Endpoint,
            
            AuthorizationServiceHttpsSoap12Endpoint,
            
            AuthorizationServiceHttpSoap12Endpoint,
        }
    }
}
